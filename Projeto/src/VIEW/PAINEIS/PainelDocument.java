/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VIEW.PAINEIS;

import DAO.DATA;
import java.io.BufferedReader;
import java.io.FileReader;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import BC.Active;
import BC.Passive;
import PDF.pdf;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import javax.swing.JTable;

/**
 *
 * @author Danilo
 */
public class PainelDocument extends javax.swing.JPanel {

    int numLinhas = 0;
    int j = 0;
    boolean pass = false, act = false;
    String linha, aux;

    /**
     * Creates new form Config
     */
    public PainelDocument() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_options = new javax.swing.JPanel();
        jlabel_Title = new javax.swing.JLabel();
        jButton_importar = new javax.swing.JButton();
        jButton_open = new javax.swing.JButton();
        jButton_delete = new javax.swing.JButton();
        cartao = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 152, 0));
        setMaximumSize(new java.awt.Dimension(720, 430));
        setMinimumSize(new java.awt.Dimension(720, 430));

        jPanel_options.setBackground(new java.awt.Color(245, 124, 0));
        jPanel_options.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Choice", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Trebuchet MS", 0, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel_options.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jlabel_Title.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jlabel_Title.setForeground(new java.awt.Color(255, 255, 255));
        jlabel_Title.setText("Document Options");
        jPanel_options.add(jlabel_Title, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        jButton_importar.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jButton_importar.setForeground(new java.awt.Color(255, 255, 255));
        jButton_importar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/xml.png"))); // NOI18N
        jButton_importar.setText("Import XML");
        jButton_importar.setBorderPainted(false);
        jButton_importar.setContentAreaFilled(false);
        jButton_importar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_importar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_importar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_importar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_importarActionPerformed(evt);
            }
        });
        jPanel_options.add(jButton_importar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 110, 80));

        jButton_open.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jButton_open.setForeground(new java.awt.Color(255, 255, 255));
        jButton_open.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/visualizardoc.png"))); // NOI18N
        jButton_open.setText("Open Document");
        jButton_open.setBorderPainted(false);
        jButton_open.setContentAreaFilled(false);
        jButton_open.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_open.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_open.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_openActionPerformed(evt);
            }
        });
        jPanel_options.add(jButton_open, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 140, -1, 80));

        jButton_delete.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jButton_delete.setForeground(new java.awt.Color(255, 255, 255));
        jButton_delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/delete.png"))); // NOI18N
        jButton_delete.setText("Delete Dates");
        jButton_delete.setBorderPainted(false);
        jButton_delete.setContentAreaFilled(false);
        jButton_delete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_delete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_delete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_deleteActionPerformed(evt);
            }
        });
        jPanel_options.add(jButton_delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 140, -1, 80));

        cartao.setBackground(new java.awt.Color(255, 152, 0));
        cartao.setMaximumSize(new java.awt.Dimension(525, 67));
        cartao.setMinimumSize(new java.awt.Dimension(525, 67));
        cartao.setPreferredSize(new java.awt.Dimension(525, 67));
        cartao.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel_options, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cartao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(135, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jPanel_options, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cartao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_importarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_importarActionPerformed
        cartao.removeAll();
        cartao.validate();
        cartao.repaint();

        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("XML File", "xml"));
        fc.setAcceptAllFileFilterUsed(false);
        // JFileChooser fc = new JFileChooser();
        int nome = fc.showOpenDialog(null);

        if (nome == JFileChooser.APPROVE_OPTION) {
            File arquivo = fc.getSelectedFile();

            boolean a = DAO.UtilidadesDAO.JaExiste(arquivo.getName());
            System.out.println("a " + a);
            if (a == true) {
                JOptionPane.showConfirmDialog(null, "Already uploaded a file with that same name, rename it first", "", JOptionPane.OK_OPTION);
            }
            int resposta2 = 0;
            if (a == false) {
                resposta2 = JOptionPane.showConfirmDialog(null, "File has " + NLine(arquivo) + " lines  \nIf there are too many lines  \nthe read process may take a little longer  \nDo you continue?", "", JOptionPane.YES_NO_OPTION);
            }

            if (resposta2 == JOptionPane.YES_OPTION && a == false) {
                try {

                    DATA.nomearquivo = arquivo.getName();

                    FileReader arq = new FileReader(arquivo.getAbsolutePath());

                    BufferedReader lerArq = new BufferedReader(arq);
                    linha = lerArq.readLine();

                    int i = 1;

                    while (linha != null) {

                        if (i > 224) {
                            aux = linha;
                            if (linha.contains("<BreathTestActive>")) {
                                pass = false;
                                act = true;
                            }

                            if (linha.contains("<BreathTestPassive>")) {
                                pass = true;
                                act = false;

                            }

                            if (act == true) {
                                try {
                                    ActiveData();
                                } catch (NullPointerException n) {

                                }
                            }
                            if (pass == true) {
                                try {
                                    PassiveData();
                                } catch (NullPointerException n) {

                                }
                            }

                        }

                        i = i + 1;
                        linha = lerArq.readLine();
                    }
                    try {
                        DATA.SendDataPA();
                    } catch (IndexOutOfBoundsException e) {

                    }
                    JOptionPane.showMessageDialog(null, "Import Complete", "", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException ex) {

                }
            }

        }
    }//GEN-LAST:event_jButton_importarActionPerformed

    private void jButton_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_openActionPerformed
        cartao.removeAll();
        cartao.validate();
        cartao.repaint();
        PDF.pdf.Main();

    }//GEN-LAST:event_jButton_openActionPerformed

    private void jButton_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_deleteActionPerformed
        cartao.removeAll();
        cartao.add(new PainelDelete());
        cartao.validate();
        cartao.repaint();
    }//GEN-LAST:event_jButton_deleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel cartao;
    private javax.swing.JButton jButton_delete;
    private javax.swing.JButton jButton_importar;
    private javax.swing.JButton jButton_open;
    private javax.swing.JPanel jPanel_options;
    private javax.swing.JLabel jlabel_Title;
    // End of variables declaration//GEN-END:variables
public void ActiveData() {

        if (linha.contains("<RawData>")) {
            aux = aux.replaceAll("<RawData>", "");
            aux = aux.replaceAll("</RawData>", "");
            Active.RawData.add(aux.trim());
        }

        if (linha.contains("<RecordNum>")) {
            aux = aux.replaceAll("<RecordNum>", "");
            aux = aux.replaceAll("</RecordNum>", "");
            Active.RecordNum.add(aux.trim());
        }
        if (linha.contains("<MainSerial>")) {
            aux = aux.replaceAll("<MainSerial>", "");
            aux = aux.replaceAll("</MainSerial>", "");
            Active.MainSerial.add(aux.trim());
        }

        if (linha.contains("<MainFWV>")) {
            aux = aux.replaceAll("<MainFWV>", "");
            aux = aux.replaceAll("</MainFWV>", "");
            Active.MainFWV.add(aux.trim());
        }
        if (linha.contains("<SampleSerial>")) {
            aux = aux.replaceAll("<SampleSerial>", "");
            aux = aux.replaceAll("</SampleSerial>", "");
            Active.SampleSerial.add(aux.trim());
        }
        if (linha.contains("<SampleFWV>")) {
            aux = aux.replaceAll("<SampleFWV>", "");
            aux = aux.replaceAll("</SampleFWV>", "");
            Active.SampleFWV.add(aux.trim());
        }

        if (linha.contains("<DateTime>")) {
            aux = aux.replaceAll("<DateTime>", "");
            aux = aux.replaceAll("</DateTime>", "");
            Active.DateTime.add(aux.trim());
        }
        if (linha.contains("<EventType>")) {
            aux = aux.replaceAll("<EventType>", "");
            aux = aux.replaceAll("</EventType>", "");
            Active.EventType.add(aux.trim());
        }
        if (linha.contains("<DownloadDateTime>")) {
            aux = aux.replaceAll("<DownloadDateTime>", "");
            aux = aux.replaceAll("</DownloadDateTime>", "");
            Active.DownloadDateTime.add(aux.trim());
        }
        if (linha.contains("<TrueResult>")) {
            aux = aux.replaceAll("<TrueResult>", "");
            aux = aux.replaceAll("</TrueResult>", "");
            Active.TrueResult.add(aux.trim());
        }
    }

    public void PassiveData() {

        if (linha.contains("<RawData>")) {
            aux = aux.replaceAll("<RawData>", "");
            aux = aux.replaceAll("</RawData>", "");
            Passive.RawData.add(aux.trim());
        }

        if (linha.contains("<RecordNum>")) {
            aux = aux.replaceAll("<RecordNum>", "");
            aux = aux.replaceAll("</RecordNum>", "");
            Passive.RecordNum.add(aux.trim());
        }
        if (linha.contains("<MainSerial>")) {
            aux = aux.replaceAll("<MainSerial>", "");
            aux = aux.replaceAll("</MainSerial>", "");
            Passive.MainSerial.add(aux.trim());
        }

        if (linha.contains("<MainFWV>")) {
            aux = aux.replaceAll("<MainFWV>", "");
            aux = aux.replaceAll("</MainFWV>", "");
            Passive.MainFWV.add(aux.trim());
        }
        if (linha.contains("<SampleSerial>")) {
            aux = aux.replaceAll("<SampleSerial>", "");
            aux = aux.replaceAll("</SampleSerial>", "");
            Passive.SampleSerial.add(aux.trim());
        }
        if (linha.contains("<SampleFWV>")) {
            aux = aux.replaceAll("<SampleFWV>", "");
            aux = aux.replaceAll("</SampleFWV>", "");
            Passive.SampleFWV.add(aux.trim());
        }

        if (linha.contains("<DateTime>")) {
            aux = aux.replaceAll("<DateTime>", "");
            aux = aux.replaceAll("</DateTime>", "");
            Passive.DateTime.add(aux.trim());
        }
        if (linha.contains("<EventType>")) {
            aux = aux.replaceAll("<EventType>", "");
            aux = aux.replaceAll("</EventType>", "");
            Passive.EventType.add(aux.trim());
        }
        if (linha.contains("<DownloadDateTime>")) {
            aux = aux.replaceAll("<DownloadDateTime>", "");
            aux = aux.replaceAll("</DownloadDateTime>", "");
            Passive.DownloadDateTime.add(aux.trim());
        }
        if (linha.contains("<ResultQualitative>")) {
            aux = aux.replaceAll("<ResultQualitative>", "");
            aux = aux.replaceAll("</ResultQualitative>", "");
            Passive.ResultQualitative.add(aux.trim());
        }
    }

    public int NLine(File arquivo) {
        try {
            long tamanhoArquivo = arquivo.length();
            FileInputStream fs = new FileInputStream(arquivo);
            DataInputStream in = new DataInputStream(fs);
            LineNumberReader lineRead = new LineNumberReader(new InputStreamReader(in));
            lineRead.skip(tamanhoArquivo);
            numLinhas = lineRead.getLineNumber() + 1;
        } catch (IOException e) {
//TODO: Tratar exceção
        }
        return numLinhas;
    }

    public Object GetData(JTable table, int row_index, int col_index) {
        return table.getModel().getValueAt(row_index, col_index);
    }
}
