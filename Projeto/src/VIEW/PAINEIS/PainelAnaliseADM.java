/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VIEW.PAINEIS;

import DAO.Func;
import DAO.TableActive;
import DAO.TablePassive;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Element;
import com.lowagie.text.FontFactory;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.IntStream;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JTable;

/**
 *
 * @author Danilo
 */
public class PainelAnaliseADM extends javax.swing.JPanel {

    static int i = 0;

    /**
     * Creates new form PainelAnalise
     */
    public PainelAnaliseADM() {
        initComponents();

        ButtonGroup bt = new ButtonGroup();
        bt.add(passive);
        bt.add(active);
        ordenar.setSelectedIndex(-1);
        ordenar.setEnabled(false);
        Table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.getVerticalScrollBar().setUnitIncrement(17);
        jScrollPane2.getVerticalScrollBar().setUnitIncrement(17);
        jScrollPane1.getHorizontalScrollBar().setUnitIncrement(17);
        jScrollPane2.getHorizontalScrollBar().setUnitIncrement(17);
        Table.getColumnModel().getColumn(0).setPreferredWidth(20);
        Table.getColumnModel().getColumn(12).setPreferredWidth(24);
        validate();
        repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        passive = new javax.swing.JRadioButton();
        active = new javax.swing.JRadioButton();
        ordenar = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        selecao = new javax.swing.JComboBox<>();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 152, 0));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(255, 152, 0));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setBorder(null);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jPanel2.setBackground(new java.awt.Color(255, 152, 0));
        jPanel2.setMaximumSize(new java.awt.Dimension(1370, 263));
        jPanel2.setMinimumSize(new java.awt.Dimension(1370, 263));
        jPanel2.setPreferredSize(new java.awt.Dimension(1370, 263));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane2.setBackground(new java.awt.Color(255, 224, 178));
        jScrollPane2.setBorder(null);

        Table.setBackground(new java.awt.Color(255, 224, 178));
        Table.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Table.setForeground(new java.awt.Color(245, 124, 0));
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Raw Data", "Record Num", "Main Serial", "Main FWV", "Sample Serial", "Sample FWV", "Date", "Time-GMT", "Event Type", "Download Date", "Download Time", "Result", "File"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(Table);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 260));

        jScrollPane1.setViewportView(jPanel2);

        jPanel4.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 680, 280));

        add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 720, 290));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 224, 178));
        jLabel1.setText("Type of Test:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 21, 110, 16));

        passive.setBackground(new java.awt.Color(255, 152, 0));
        passive.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        passive.setForeground(new java.awt.Color(255, 255, 255));
        passive.setText("Passive");
        passive.setContentAreaFilled(false);
        passive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passiveActionPerformed(evt);
            }
        });
        add(passive, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 51, -1, -1));

        active.setBackground(new java.awt.Color(255, 152, 0));
        active.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        active.setForeground(new java.awt.Color(255, 255, 255));
        active.setText("Active");
        active.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activeActionPerformed(evt);
            }
        });
        add(active, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 81, 69, -1));

        ordenar.setBackground(new java.awt.Color(255, 152, 0));
        ordenar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ordenar.setForeground(new java.awt.Color(255, 224, 178));
        ordenar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month", "Year", "MainSerial", "Name File" }));
        ordenar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(245, 124, 0)));
        ordenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordenarActionPerformed(evt);
            }
        });
        add(ordenar, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 196, -1));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 224, 178));
        jLabel2.setText("Order by:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 50, 160, 16));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 224, 178));
        jLabel4.setText("Show only in:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 50, -1, -1));

        selecao.setBackground(new java.awt.Color(255, 152, 0));
        selecao.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        selecao.setForeground(new java.awt.Color(255, 224, 178));
        selecao.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(245, 124, 0)));
        selecao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selecaoActionPerformed(evt);
            }
        });
        add(selecao, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 80, 196, -1));

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/impressao.png"))); // NOI18N
        jButton5.setBorderPainted(false);
        jButton5.setContentAreaFilled(false);
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 10, 60, 60));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 224, 178));
        jLabel3.setText("Selected Lines");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 80, -1, -1));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 224, 178));
        jLabel5.setText("All lines");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 80, -1, -1));

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/impressao.png"))); // NOI18N
        jButton6.setBorderPainted(false);
        jButton6.setContentAreaFilled(false);
        jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 10, 60, 60));
    }// </editor-fold>//GEN-END:initComponents

    private void ordenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordenarActionPerformed
        int valor = ordenar.getSelectedIndex();
        selecao.setSelectedIndex(-1);
        try {
            if (active.isSelected() == true) {
                Func.PS = "Active";

            }
        } catch (Exception e) {

        }
        try {
            if (passive.isSelected() == true) {

                Func.PS = "Passive";
            }
        } catch (Exception e) {

        }
        try {
            if (valor == 0) {
                TableActive.valor = 0;
                TablePassive.valor = 0;
                Func.Add(0);
            }
        } catch (Exception e) {

        }
        try {
            if (valor == 1) {
                TableActive.valor = 1;
                TablePassive.valor = 1;
                Func.Add(1);
            }
        } catch (Exception e) {

        }

        try {
            if (valor == 3) {
               
                TableActive.valor = 3;
                TablePassive.valor = 3;
                Func.Add(3);

            }
            if (active.isSelected() == true) {
                TableActive.readJTableForDesc("");

            }
            if (passive.isSelected() == true) {
                TablePassive.readJTableForDesc("");
            }
        } catch (Exception e) {

        }
        try {
            if (valor == 2) {

                TableActive.valor = 2;
                TablePassive.valor = 2;

                if (active.isSelected() == true) {
                    TableActive.readJTableForDesc("");

                }
                if (passive.isSelected() == true) {
                    TablePassive.readJTableForDesc("");
                }
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_ordenarActionPerformed

    private void selecaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selecaoActionPerformed
        if (active.isSelected() == true) {
            TableActive.readJTableForDesc("");

        }
        if (passive.isSelected() == true) {
            TablePassive.readJTableForDesc("");
        }

    }//GEN-LAST:event_selecaoActionPerformed

    private void passiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passiveActionPerformed
        TablePassive.valor = -1;
        TableActive.valor = -1;
        ordenar.setSelectedIndex(-1);
        selecao.removeAllItems();
        ordenar.setEnabled(true);
        for (int t = 0; t <= 100; t++) {
            try {

                Table.removeAll();

            } catch (Exception e) {

            }
        }
    }//GEN-LAST:event_passiveActionPerformed

    private void activeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activeActionPerformed
        TablePassive.valor = -1;
        TableActive.valor = -1;
        ordenar.setSelectedIndex(-1);
        selecao.removeAllItems();
        ordenar.setEnabled(true);
        for (int t = 0; t <= 100; t++) {
            try {

                Table.removeAll();

            } catch (Exception e) {

            }
        }
    }//GEN-LAST:event_activeActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        
        if (Table.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Empty table", "", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                File file = new File("C:\\Alcolizer Reader\\");
                if (!file.exists()) {

                    try {
                        file.mkdirs();
                    } catch (Exception ex) {

                    }

                }
                String var = null;
                if (active.isSelected() == true) {
                    var = "Active";
                }
                if (passive.isSelected() == true) {
                    var = "Passive";
                }

                Document document2 = new Document();

                String nomearquivo = "C:\\Alcolizer Reader\\Document" + Func.Agora().trim() + ".pdf";
                PdfWriter.getInstance(document2, new FileOutputStream(nomearquivo));

                document2.open();
                 Paragraph pTitulo = new Paragraph(new Phrase(20F, var, FontFactory.getFont(FontFactory.HELVETICA, 18F)));
                pTitulo.setAlignment(Element.ALIGN_JUSTIFIED);
                 document2.add(pTitulo);
               
                document2.add(new Paragraph(" "));
                Paragraph p2 = new Paragraph(new Phrase(16F, "Generated in " + Func.DataTempo(), FontFactory.getFont(FontFactory.HELVETICA, 14F)));
                p2.setAlignment(Element.ALIGN_JUSTIFIED);
               
                document2.add(p2);
                document2.add(new Paragraph(" "));
                document2.add(new Paragraph(" "));
                PdfPTable tab2 = new PdfPTable(4);
                tab2.addCell("Main Serial");
                tab2.addCell("Date");
                tab2.addCell("Time");
                tab2.addCell("Result");
                for (int j = 0; j < Table.getRowCount(); j++) {
                    Object obj1 = GetData(PainelAnaliseADM.Table, j, 3);
                    Object obj2 = GetData(PainelAnaliseADM.Table, j, 7);
                    Object obj3 = GetData(PainelAnaliseADM.Table, j, 8);
                    Object obj4 = GetData(PainelAnaliseADM.Table, j, 12);
                    String value1 = obj1.toString();
                    String value2 = obj2.toString();
                    String value3 = obj3.toString();
                    String value4 = obj4.toString();
                    
                    tab2.addCell(value1);
                    tab2.addCell(value2);
                    tab2.addCell(value3);
                    tab2.addCell(value4);

                }
                document2.add(tab2);
                document2.close();
                JOptionPane.showMessageDialog(null, "Archive is in " + nomearquivo, "", JOptionPane.INFORMATION_MESSAGE);
                int r = JOptionPane.showConfirmDialog(null, "Do you want to open this file now?", "", JOptionPane.YES_NO_OPTION);
                if (r == JOptionPane.YES_OPTION) {
                    PDF.pdf.Abrir(nomearquivo);
                }
            } catch (DocumentException | FileNotFoundException e) {

            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        if (Table.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Select at least one \nline to generate the PDF", "", JOptionPane.INFORMATION_MESSAGE);
        } else {
            File file = new File("C:\\Alcolizer Reader\\");
            if (!file.exists()) {

                try {
                    file.mkdirs();
                } catch (Exception ex) {

                }

            }
            try {
                String var = null;
                if (active.isSelected() == true) {
                    var = "Active";
                }
                if (passive.isSelected() == true) {
                    var = "Passive";
                }
                Document document1 = new Document();
                String nomearquivo = "C:\\Alcolizer Reader\\Document" + Func.Agora().trim() + ".pdf";
                PdfWriter.getInstance(document1, new FileOutputStream(nomearquivo));

                PdfPTable tab1 = new PdfPTable(4);
                tab1.addCell("Main Serial");
                tab1.addCell("Date");
                tab1.addCell("Time");
                tab1.addCell("Result");
                document1.open();
                Paragraph pTitulo = new Paragraph(new Phrase(20F, var, FontFactory.getFont(FontFactory.HELVETICA, 18F)));
                pTitulo.setAlignment(Element.ALIGN_JUSTIFIED);
                 document1.add(pTitulo);
                document1.add(new Paragraph(" "));
                Paragraph p2 = new Paragraph(new Phrase(16F, "Generated in " + Func.DataTempo(), FontFactory.getFont(FontFactory.HELVETICA, 14F)));
                p2.setAlignment(Element.ALIGN_JUSTIFIED);
               
                document1.add(p2);
                document1.add(new Paragraph(" "));
                document1.add(new Paragraph(" "));

                int[] a = Table.getSelectedRows();

                boolean tem = false;
                for (i = 0; i < Table.getRowCount(); i++) {
                    tem = (IntStream.of(a).anyMatch(x -> {
                        return x == (i);
                    }));
                    if (tem == true) {

                        Object obj1 = GetData(PainelAnaliseADM.Table, i + 0, 3);
                        Object obj2 = GetData(PainelAnaliseADM.Table, i + 0, 7);
                        Object obj3 = GetData(PainelAnaliseADM.Table, i + 0, 8);
                        Object obj4 = GetData(PainelAnaliseADM.Table, i + 0, 12);
                        String value1 = obj1.toString();
                        String value2 = obj2.toString();
                        String value3 = obj3.toString();
                        String value4 = obj4.toString();
                        tab1.addCell(value1);
                        tab1.addCell(value2);
                        tab1.addCell(value3);
                        tab1.addCell(value4);

                    }

                }
                document1.add(tab1);
                document1.close();
                JOptionPane.showMessageDialog(null, "Archive is in " + nomearquivo, "", JOptionPane.INFORMATION_MESSAGE);
                int r = JOptionPane.showConfirmDialog(null, "Do you want to open this file now?", "", JOptionPane.YES_NO_OPTION);
                if (r == JOptionPane.YES_OPTION) {
                    PDF.pdf.Abrir(nomearquivo);
                }
            } catch (DocumentException ex) {

            } catch (FileNotFoundException ex) {
                Logger.getLogger(PainelAnaliseADM.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTable Table;
    public static javax.swing.JRadioButton active;
    public static javax.swing.JButton jButton5;
    public static javax.swing.JButton jButton6;
    public static javax.swing.JLabel jLabel1;
    public static javax.swing.JLabel jLabel2;
    public static javax.swing.JLabel jLabel3;
    public static javax.swing.JLabel jLabel4;
    public static javax.swing.JLabel jLabel5;
    public static javax.swing.JPanel jPanel2;
    public static javax.swing.JPanel jPanel4;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JComboBox<String> ordenar;
    public static javax.swing.JRadioButton passive;
    public static javax.swing.JComboBox<String> selecao;
    // End of variables declaration//GEN-END:variables
public String Ordem(int n, int a) {
        String nome = null;
        switch (n) {
            case 0:
                nome = "RawData";
                break;
            case 1:
                nome = "RecordNum";
                break;
            case 2:
                nome = "MainSerial";
                break;
            case 3:
                nome = "DateD,";
                break;
            case 4:
                nome = "TimeT";
                break;
            case 5:
                nome = "EventType";
                break;
            case 6:
                nome = "DownloadDate";
                break;
            case 7:
                nome = "DownloadTime";
                break;

            case 10:
                nome = "NameFile";
                break;
            case -1:
                nome = "";
                break;
            default:;
        }
        if (n == 9 && passive.isSelected() == true) {
            nome = "ResultQualitative";
        }
        if (n == 9 && active.isSelected() == true) {
            nome = "TrueResult";
        }
        return nome;
    }

    public Object GetData(JTable table, int row_index, int col_index) {
        return table.getModel().getValueAt(row_index, col_index);
    }

    public static void Set() {

    }
}
